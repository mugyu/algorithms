# Basis Spline
# B-スプライン曲線
#  開一様ノットベクトル( open uniform knot vector ) or
#  一様間隔ノットベクトル( uniformly-spaced knot vector )
require 'rational'
class BSpline
  def initialize(data)
    @data = data
    @m = data.length
    @n = @m - 1
  end

  def calc(t)
    t0 = by_limited(t, 0, 1) * @m - 1
    t1 = t2 = 0
    x = 0
    y = 0
    -2.upto(@m + 1) do |i|
      t1 = (t0 - i).abs
      cn = case
           when t1 < 1
             # t2 = 3 * t1 ** 2
             # (t1 * t2 - 2 * t2 + 4) / 6
             Rational(3 * t1 ** 3 - 6 * t1 ** 2 + 4, 6)
           when t1 < 2
             Rational((t1 - 2) ** 3, -6)
           else
             next
           end
      j = by_limited(i, 0, @n)
      x += @data[j][0] * cn
      y += @data[j][1] * cn
    end
    [x, y]
  end

  def by_limited(num, min, max)
    num < min ? min : num > max ? max : num
  end
end
data = [[30, 90], [231, 147], [63, 495], [513, 129], [459, 492]];
bspline = BSpline.new(data)
0.step(1, 0.01) do |t|
  x, y = bspline.calc(t)
  printf("%f\t%f\n", x, y)
end

# => 30.000000	90.000000
# => 30.004187	90.001187
# => 30.033500	90.009500
# => 30.113063	90.032063
# => 30.268000	90.076000
# => 30.523438	90.148438
# => 30.904500	90.256500
# => 31.436313	90.407313
# => 32.144000	90.608000
# => 33.052687	90.865687
# => 34.187500	91.187500
# => 35.573563	91.580562
# => 37.236000	92.052000
# => 39.199937	92.608937
# => 41.490500	93.258500
# => 44.132813	94.007813
# => 47.152000	94.864000
# => 50.573188	95.834188
# => 54.421500	96.925500
# => 58.722062	98.145062
# => 63.500000	99.500000
# => 68.764375	101.001125
# => 74.460000	102.674000
# => 80.515625	104.547875
# => 86.860000	106.652000
# => 93.421875	109.015625
# => 100.130000	111.668000
# => 106.913125	114.638375
# => 113.700000	117.956000
# => 120.419375	121.650125
# => 127.000000	125.750000
# => 133.370625	130.284875
# => 139.460000	135.284000
# => 145.196875	140.776625
# => 150.510000	146.792000
# => 155.328125	153.359375
# => 159.580000	160.508000
# => 163.194375	168.267125
# => 166.100000	176.666000
# => 168.225625	185.733875
# => 169.500000	195.500000
# => 169.884312	205.967813
# => 169.469500	217.037500
# => 168.378938	228.583437
# => 166.736000	240.480000
# => 164.664063	252.601563
# => 162.286500	264.822500
# => 159.726687	277.017188
# => 157.108000	289.060000
# => 154.553812	300.825313
# => 152.187500	312.187500
# => 150.132437	323.020937
# => 148.512000	333.200000
# => 147.449562	342.599063
# => 147.068500	351.092500
# => 147.492188	358.554688
# => 148.844000	364.860000
# => 151.247313	369.882813
# => 154.825500	373.497500
# => 159.701937	375.578437
# => 166.000000	376.000000
# => 173.799125	374.687562
# => 183.003000	371.770500
# => 193.471375	367.429188
# => 205.064000	361.844000
# => 217.640625	355.195313
# => 231.061000	347.663500
# => 245.184875	339.428937
# => 259.872000	330.672000
# => 274.982125	321.573062
# => 290.375000	312.312500
# => 305.910375	303.070688
# => 321.448000	294.028000
# => 336.847625	285.364813
# => 351.969000	277.261500
# => 366.671875	269.898438
# => 380.816000	263.456000
# => 394.261125	258.114562
# => 406.867000	254.054500
# => 418.493375	251.456188
# => 429.000000	250.500000
# => 438.281625	251.313500
# => 446.373000	253.813000
# => 453.343875	257.862000
# => 459.264000	263.324000
# => 464.203125	270.062500
# => 468.231000	277.941000
# => 471.417375	286.823000
# => 473.832000	296.572000
# => 475.544625	307.051500
# => 476.625000	318.125000
# => 477.142875	329.656000
# => 477.168000	341.508000
# => 476.770125	353.544500
# => 476.019000	365.629000
# => 474.984375	377.625000
# => 473.736000	389.396000
# => 472.343625	400.805500
# => 470.877000	411.717000
# => 469.405875	421.994000
# => 468.000000	431.500000
